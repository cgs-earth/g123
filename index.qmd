---
title: "Preliminary Analysis for Appalachian Prison Water Contamination Exposure Project"
author: 
  - Kyle Onda, Center for Geospatial Solutions
date: "`r format(Sys.time(), '%d %B, %Y')`"
format: 
  html:
    title-block-banner: true
    toc: true
    toc-location: left
    toc-depth: 3
    html-math-method: katex
    css: styles.css
    code-fold: true
    code-summary: "show the code"
    code-overflow: wrap
    code-tools: true
    number-sections: true
    theme: 
      dark: slate
      light: flatly
editor: visual
---

## Introduction

The purpose of this document is to demonstrate some data integration for analyzing water contaminant exposures in Appalachi

## Setup

Here we import necessary libraries.

```{r}
library(tidyverse)
library(sf)
library(mapview)
library(tidycensus)
```

## Map main features of interest

### Get Geospatial Data

First we get the boundaries of the Appalachian Regional Commission (ARC) and its constituent counties

```{r}
arc <- sf::read_sf("https://services.arcgis.com/nkunl3y8FDxPkXDl/ArcGIS/rest/services/arc_boundary/FeatureServer/0/query?where=1%3D1&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&relationParam=&returnGeodetic=false&outFields=*&returnGeometry=true&returnCentroid=false&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&defaultSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pgeojson&token=") 

counties <- sf::read_sf("https://reference.geoconnex.us/collections/counties/items?limit=4000")
states <- sf::read_sf("https://reference.geoconnex.us/collections/states/items?limit=4000")
counties_ct <- st_centroid(counties)
counties_ct_arc <- counties_ct[arc,]
counties_arc <- counties[which(counties$uri %in% counties_ct$uri),]
states <- states %>% filter(STATEFP %in% counties_ct_arc$STATEFP)
counties_arc_states <- counties %>% filter(STATEFP %in% counties_ct_arc$STATEFP)

counties_ct_arc$ARC <- "in ARC"
counties_ct_arc <- counties_ct_arc %>% select(id,STATEFP,COUNTYFP,ARC)

counties2 <- counties_arc_states %>%
  left_join(counties_ct_arc%>%st_drop_geometry(),by=c("id","STATEFP","COUNTYFP")) 

counties2$ARC[which(is.na(counties2$ARC))] <- "not ARC"


```

Now we get relevant public water systems from the Internet of Water geoconnex.us system

```{r}
#download.file(url = "https://www.hydroshare.org/resource/3295a17b4cc24d34bd6a5c5aaf753c50/data/contents/ref_pws.gpkg" ,destfile="data/pws.gpkg")

pws_all <- read_sf("data/pws.gpkg") %>% st_make_valid()
pws <- pws_all[counties2,]
pws$ARC <- "not ARC"
pws2 <- pws[arc,]
pws$ARC[which(pws$pwsid %in% pws2$pwsid)] <- "in ARC"

pws <- pws %>%
  select(pwsid,
         uri,
         pws_name,
         tier,
         primary_water_source,
         sdwis_link,
         ARC
         ) %>%
  mutate(sdwis_link =
           paste0('<a href="',
            sdwis_link,
            '">SDWIS link</a>')
  )
```

Now we get prisons in the region

```{r}
prisons_all <- sf::read_sf("https://opendata.arcgis.com/api/v3/datasets/2d6109d4127d458eaf0958e4c5296b67_0/downloads/data?format=geojson&spatialRefId=4326&where=1%3D1") 

prisons <- prisons_all[states,] %>% filter(TYPE %in% c("STATE","FEDERAL"))
prisons_arc <- prisons[arc,]
prisons$ARC <- "not ARC"
prisons$ARC[which(prisons$FACILITYID %in% prisons_arc$FACILITYID)] <- "in ARC"


prisons_ct <- st_centroid(prisons)
## filter to fed/state only
## visualize Status

## landfills
landfills <- sf::read_sf("https://services1.arcgis.com/Hp6G80Pky0om7QvQ/arcgis/rest/services/Solid_Waste_Landfill_Facilities/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson")

landfills <- landfills[states,]
landfills$ARC <- "not ARC"
landfills_arc <- landfills[arc,]
landfills$ARC[which(landfills$OBJECTID %in% landfills_arc$OBJECTID)] <- "in ARC"

## superfunds
superfund <- sf::read_sf("https://services.arcgis.com/cJ9YHowT8TU7DUyn/ArcGIS/rest/services/Superfund_National_Priorities_List_(NPL)_Sites_with_Status_Information/FeatureServer/0/query?where=1%3D1&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&relationParam=&returnGeodetic=false&outFields=*&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&defaultSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pgeojson&token=")


superfund <- superfund[states,]
superfund$ARC <- "not ARC"
superfund_arc <- superfund[arc,]
superfund$ARC[which(superfund$OBJECTID %in% superfund_arc$OBJECTID)] <- "in ARC"

# retirement homes
retirement <- sf::read_sf("https://services1.arcgis.com/Hp6G80Pky0om7QvQ/arcgis/rest/services/NursingHomes/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson")

retirement <- retirement[states,]
retirement$ARC <- "not ARC"
retirement_arc <- retirement[arc,]
retirement$ARC[which(retirement$OBJECTID %in% retirement_arc$OBJECTID)] <- "in ARC"

# npdes
npdes <- readr::read_csv("data/npdes_outfalls_layer.csv") %>%
  st_as_sf(coords=c("LONGITUDE83","LATITUDE83"),crs=4269) %>% st_transform(4326)
npdes <- npdes[states,]
npdes$ARC <- "not ARC"
npdes_arc <- npdes[arc,]
npdes$ARC[which(npdes$OBJECTID %in% npdes_arc$OBJECTID)] <- "in ARC"



### Census
library(tigris)
library(tidyverse)
library(tidycensus)
library(sf)
options(tigris_use_cache = TRUE)
ctys <- counties(cb = TRUE) %>% 
  mutate(fips = paste0(STATEFP,COUNTYFP)) %>% 
  filter(fips %in% counties_ct$id)

state_codes <- states$id

### Block Groups2000
bgs_2000 <- map_df(state_codes, function(state_code) {
  state <- filter(ctys, STATEFP == state_code)
  county_codes <- state$COUNTYFP
  get_decennial(geography = "block group", year =2000, geometry=TRUE,
                variables = "H010001",keep_geo_vars=TRUE,
          state = state_code, county = county_codes)
})

sf::write_sf(bgs_2000,"data/census/bg2000.gpkg")
## Census tracts 2000
tracts_2000 <- map_df(state_codes, function(state_code) {
  state <- filter(ctys, STATEFP == state_code)
  county_codes <- state$COUNTYFP
  get_decennial(geography = "tract", year =2000, geometry=TRUE,
                variables = "H010001",keep_geo_vars=TRUE,
          state = state_code, county = county_codes)
})
sf::write_sf(tracts_2000,"data/census/tr2000.gpkg")

### Block Groups2010
bgs_2010 <- map_df(state_codes, function(state_code) {
  state <- filter(ctys, STATEFP == state_code)
  county_codes <- state$COUNTYFP
  get_decennial(geography = "block group", year =2010, geometry=TRUE,
                variables = "H010001",keep_geo_vars=TRUE,
          state = state_code, county = county_codes)
})

sf::write_sf(bgs_2010,"data/census/bg2010.gpkg")
## Census tracts 2010
tracts_2010 <- map_df(state_codes, function(state_code) {
  state <- filter(ctys, STATEFP == state_code)
  county_codes <- state$COUNTYFP
  get_decennial(geography = "tract", year =2010, geometry=TRUE,
                variables = "H010001", keep_geo_vars=TRUE,
          state = state_code, county = county_codes)
})
sf::write_sf(tracts_2010,"data/census/tr2010.gpkg")

### Block Groups2020
bgs_2020 <- map_df(state_codes, function(state_code) {
  state <- filter(ctys, STATEFP == state_code)
  county_codes <- state$COUNTYFP
  get_decennial(geography = "block group", year =2020, geometry=TRUE,
                variables = "H1_001N",keep_geo_vars=TRUE,
          state = state_code, county = county_codes)
})

sf::write_sf(bgs_2020,"data/census/bg2020.gpkg")
## Census tracts 2020
tracts_2020 <- map_df(state_codes, function(state_code) {
  state <- filter(ctys, STATEFP == state_code)
  county_codes <- state$COUNTYFP
  get_decennial(geography = "tract", year =2020, geometry=TRUE,
                variables = "H1_001N", keep_geo_vars=TRUE,
          state = state_code, county = county_codes)
})
sf::write_sf(tracts_2020,"data/census/tr2020.gpkg")


bgs_2000 <- sf::read_sf("data/census/bg2000.gpkg")
bgs_2010 <- sf::read_sf("data/census/bg2010.gpkg")
bgs_2020 <- sf::read_sf("data/census/bg2020.gpkg")

tr_2000 <- sf::read_sf("data/census/tr2000.gpkg")
tr_2010 <- sf::read_sf("data/census/tr2010.gpkg")
tr_2020 <- sf::read_sf("data/census/tr2020.gpkg")

## prisons to tracts
p1 <- st_join(prisons_ct%>%mutate(ID_COUNTY=COUNTYFIPS),tr_2000%>%
                select(GEOID)%>%
                mutate(ID_TRACT_00=GEOID)%>%
                select(ID_TRACT_00)%>%
                st_transform(4326)) %>%
  st_join(tr_2010%>%
                select(GEOID)%>%
                mutate(ID_TRACT_10=GEOID)%>%
                select(ID_TRACT_10)%>%
                st_transform(4326)) %>%
    st_join(tr_2020%>%
                select(GEOID)%>%
                mutate(ID_TRACT_20=GEOID)%>%
                select(ID_TRACT_20)%>%
                st_transform(4326)) %>%
     st_join(bgs_2000%>%
                select(GEOID)%>%
                mutate(ID_BLKGRP_00=GEOID)%>%
                select(ID_BLKGRP_00)%>%
                st_transform(4326)) %>%
  st_join(bgs_2010%>%
                select(GEOID)%>%
                mutate(ID_BLKGRP_10=GEOID)%>%
                select(ID_BLKGRP_10)%>%
                st_transform(4326)) %>%
    st_join(bgs_2020%>%
                select(GEOID)%>%
                mutate(ID_BLKGRP_20=GEOID)%>%
                select(ID_BLKGRP_20)%>%
                st_transform(4326)) 

sf::write_sf(p1,"data/geocoded/prisons_geocode.gpkg")
write_csv(p1 %>% st_drop_geometry(),"data/geocoded/prisons_geocode.csv")

## superfund to tracts
sf <- st_join(superfund%>%st_transform(4326),counties%>%
                mutate(ID_COUNTY=paste0(STATEFP,COUNTYFP))) %>%
  filter(!is.na(ID_COUNTY))%>%
  st_join(tr_2000%>%
                select(GEOID)%>%
                mutate(ID_TRACT_00=GEOID)%>%
                select(ID_TRACT_00)%>%
                st_transform(4326)) %>%
  st_join(tr_2010%>%
                select(GEOID)%>%
                mutate(ID_TRACT_10=GEOID)%>%
                select(ID_TRACT_10)%>%
                st_transform(4326)) %>%
    st_join(tr_2020%>%
                select(GEOID)%>%
                mutate(ID_TRACT_20=GEOID)%>%
                select(ID_TRACT_20)%>%
                st_transform(4326)) %>%
     st_join(bgs_2000%>%
                select(GEOID)%>%
                mutate(ID_BLKGRP_00=GEOID)%>%
                select(ID_BLKGRP_00)%>%
                st_transform(4326)) %>%
  st_join(bgs_2010%>%
                select(GEOID)%>%
                mutate(ID_BLKGRP_10=GEOID)%>%
                select(ID_BLKGRP_10)%>%
                st_transform(4326)) %>%
    st_join(bgs_2020%>%
                select(GEOID)%>%
                mutate(ID_BLKGRP_20=GEOID)%>%
                select(ID_BLKGRP_20)%>%
                st_transform(4326)) 

sf::write_sf(sf,"data/geocoded/superfund_geocode.gpkg")
write_csv(sf %>% st_drop_geometry(),"data/geocoded/superfund_geocode.csv")

## landfill to tracts
lf <- landfills %>% 
  st_join(counties%>%
                mutate(ID_COUNTY=paste0(STATEFP,COUNTYFP))%>%
            select(ID_COUNTY)) %>%
  filter(!is.na(ID_COUNTY))%>%
  st_join(tr_2000%>%
                select(GEOID)%>%
                mutate(ID_TRACT_00=GEOID)%>%
                select(ID_TRACT_00)%>%
                st_transform(4326)) %>%
  st_join(tr_2010%>%
                select(GEOID)%>%
                mutate(ID_TRACT_10=GEOID)%>%
                select(ID_TRACT_10)%>%
                st_transform(4326)) %>%
    st_join(tr_2020%>%
                select(GEOID)%>%
                mutate(ID_TRACT_20=GEOID)%>%
                select(ID_TRACT_20)%>%
                st_transform(4326)) %>%
     st_join(bgs_2000%>%
                select(GEOID)%>%
                mutate(ID_BLKGRP_00=GEOID)%>%
                select(ID_BLKGRP_00)%>%
                st_transform(4326)) %>%
  st_join(bgs_2010%>%
                select(GEOID)%>%
                mutate(ID_BLKGRP_10=GEOID)%>%
                select(ID_BLKGRP_10)%>%
                st_transform(4326)) %>%
    st_join(bgs_2020%>%
                select(GEOID)%>%
                mutate(ID_BLKGRP_20=GEOID)%>%
                select(ID_BLKGRP_20)%>%
                st_transform(4326)) 

sf::write_sf(lf,"data/geocoded/landfill_geocode.gpkg")
write_csv(lf %>% st_drop_geometry(),"data/geocoded/landfill_geocode.csv")



## npdes to tracts
npdes <- npdes  %>% 
  st_join(counties%>%
                mutate(ID_COUNTY=paste0(STATEFP,COUNTYFP))%>%
            select(ID_COUNTY)) %>%
  filter(!is.na(ID_COUNTY))%>%
  st_join(tr_2000%>%
                select(GEOID)%>%
                mutate(ID_TRACT_00=GEOID)%>%
                select(ID_TRACT_00)%>%
                st_transform(4326)) %>%
  st_join(tr_2010%>%
                select(GEOID)%>%
                mutate(ID_TRACT_10=GEOID)%>%
                select(ID_TRACT_10)%>%
                st_transform(4326)) %>%
    st_join(tr_2020%>%
                select(GEOID)%>%
                mutate(ID_TRACT_20=GEOID)%>%
                select(ID_TRACT_20)%>%
                st_transform(4326)) %>%
     st_join(bgs_2000%>%
                select(GEOID)%>%
                mutate(ID_BLKGRP_00=GEOID)%>%
                select(ID_BLKGRP_00)%>%
                st_transform(4326)) %>%
  st_join(bgs_2010%>%
                select(GEOID)%>%
                mutate(ID_BLKGRP_10=GEOID)%>%
                select(ID_BLKGRP_10)%>%
                st_transform(4326)) %>%
    st_join(bgs_2020%>%
                select(GEOID)%>%
                mutate(ID_BLKGRP_20=GEOID)%>%
                select(ID_BLKGRP_20)%>%
                st_transform(4326)) 

sf::write_sf(npdes,"data/geocoded/npdes_geocode.gpkg")
write_csv(npdes %>% st_drop_geometry(),"data/geocoded/npdes_geocode.csv")
npdes_major <- npdes[which(npdes$MAJOR_MINOR_FLAG=="Major"),]
## mines


```


### Make a map

```{r}


  mapview(arc,
        col.regions="black",
        lwd=3,
        layer.name = "ARC Boundary", canvas=TRUE) +
  mapview(states,
          alpha.regions=0.5,
          col.regions="grey",
          lwd=2,
          layer.name="States", canvas=TRUE) +
    mapview(pws,canvas=TRUE, layer.name="Drinking Water Systems") +
    mapview(prisons_ct, canvas=TRUE, cex=5, zcol="TYPE", layer.name="Prisons") +
    mapview(prisons,canvas=TRUE, legend=FALSE,zcol="TYPE") + 
  mapview(retirement, col.regions="red") +
  mapview(landfills, col.regions="orange") +
  mapview(superfund, col.regions="purple") 
  
  ## see https://rpubs.com/ksonda-lilp/prisons-pws-arc
```

## Aim 1

Water quality monitoring violations from utilities

## Aim 2: Proximity to environmental hazards

EJ (contamination sources) (look for ejscreen data)

-TSDF

-Superfund

-Landfills

-animal feedlots

-FRI

-NPDES

100 prisons in appalachia. 50% are in proximity to 2km/ 5km

-   drinking water treatment plant

-   source water

What's the counter-factual? Other institutionalized populations

-   schools

-   community colleges

    https://ope.ed.gov/dapip/#/download-data-files

-   https://nces.ed.gov/ipeds/use-the-data

-   Retirement Homes

    https://hifld-geoplatform.opendata.arcgis.com/maps/nursing-homes

-   https://kygisserver.ky.gov/arcgis/rest/services/WGS84WM_Services/Ky_Water_WGS84WM/MapServer/11

-   Military installations

Census tract, 2020 tracts

Central Appalachia Deep Dive

-   Compare with local communities

-   Wardens cooperative in Virginia

USP Big Sandy

https://www.bop.gov/locations/institutions/bsy/index.jsp

http://dep.gateway.ky.gov/DWW/JSP/AnalyteList.jsp?tinwsys_is_number=1358&tinwsys_st_code=KY

-   get all violations

SW Virginia

Red Onion

Tennessee Case Studies

## Case Study formats:
